mov r10, #2--dimensions of matrix
mul r11, r10, r10--size of matrix in memory, end address of first matrix
mul r12, r11, #2--end address of second matrix
mov r0, #0--address
mov r1, #0--value
mov r2, #0--count
.setup
str r1, r0
add r0, r0, #1
add r1, r1, #1
cmp r1, r11
bl .setup
mov r1, #0
add r2, r2, #1
cmp r2, #2
bl .setup--2 matrices are created
mov r0, #0--row index of first matrix
mov r7, #0--row index reset point
mov r1, r11--column index of second matrix
mul r2, r11, #2--starting address of solution
mov r3, #0--calculated element
.calc_element
ldr r4, r0--row element
ldr r5, r1--column element
mul r6, r4, r5--multiply the elements
add r3, r3, r6--add elements
add r0, r0, #1--get next row element
add r1, r1, r10--get next column element
cmp r1, r12--calculate rest of r3
bleq .calc_element
str r3, r2--store solution
mov r3, #0--reset r3
add r2, r2, #1--increment address to store next element of array
add r1, r1, #1--change column
mod r1, r1, r10--change column
cmp r1, 0--if we indexed to the last column -> start at next row
beq .inc_row
b .reset_row
.inc_row
add r7, r7, r10--start at next row
cmp r7, r11
beq .end
b .reset_row
.reset_row
mov r0, r7
b .calc_element
.end